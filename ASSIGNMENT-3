#include<iostream>
using namespace std;

class Node{
    public:
        int key;
        Node *ln,*rn;

};
class Tree{
    public:
        Node *root;
        Node *createtree(int key){
            root = new Node;
            root->key = key;
            root->ln=NULL;
            root->rn=NULL;
            return root;

        }
        void insertnode(int key,Node *root){
            Node *node = new Node;
            node->key = key;
            if(root->key > key){
                if (root->ln==NULL)
                {
                    root->ln=node;
                }
                else{
                    insertnode(key,root->ln);
                }
                
            }
            else if (root->key < key)
            {
                if (root->rn==NULL)
                {
                    root->rn=node;
                }
                else{
                    insertnode(key,root->rn);
                }
                
            }
            else{
                cout<<"No duplication of keys allowed";
            }
            
        }
        void searchNode(int searchnode,Node *root){
            if (root==NULL)
            {
                cout<<"No tree present";
            }
            if (root->key == searchnode)
            {
                cout<<"Key found";
            }
            else if(root->key > searchnode)
            {
                if (root->ln==NULL)
                {
                    cout<<"Key not pre";
                }
                else
                {
                    searchNode(searchnode,root->ln);
                }
            }
            else if(root->key < searchnode)
            {
                if (root->rn==NULL)
                {
                    cout<<"key not present";
                }
                else{
                    searchNode(searchnode,root->rn);
                }
            }
        }
        void displayInoder(Node *root){
            if (root!=NULL)
            {
                displayInoder(root->ln);
                cout<<root->key<<"\n";
                displayInoder(root->rn);
            }
        }
        void displaymin(Node *root){
            while (root->ln!=NULL)
            {
                root = root->ln; 
            }
            cout<<"\nMinimum no, "<<root->key;
        }

        int longestPath(Node *root){
            if (root==NULL)
                return 0;
            int Lctr = longestPath(root->ln);
            int Rctr = longestPath(root->rn);

            if (Lctr > Rctr)
            {
                return (Lctr+1);
            }
            if(Lctr < Rctr){
                return (Rctr+1);
            }
        }
        Node* swapNode(Node *root){
            Node *temp;
            if(root==NULL){
                return NULL;
            }
            temp=root->ln;
            root->ln=root->rn;
            root->rn=temp;

            swapNode(root->ln);
            swapNode(root->rn);
            return 0;
        }


};
int main(){
    int choice,flag=0;
    int key,searchkey;
    Tree t1;
    Node *root;
    do
    {
        cout<<"\n 1.Enter a no. \n 2. Display \n3. Dispaly min valued node \n4.Swap left and right nodes \n5. Search  \n6. No of nodes in longest path \n 7.Exit";
        cin>>choice;
        switch (choice)
        {
        case 1:
            cout<<"Enter no. ";
            
            cin>>key;
            if (flag==0)
            {
                root=t1.createtree(key);
                flag =1;
            }
            else{
                t1.insertnode(key,root);
            }
            break;
        case 2:
            t1.displayInoder(root);
            break;
        case 3:
            t1.displaymin(root);
            break;

        case 4:
            t1.swapNode(root);
            cout << "Swapped! The new list is : ";
            t1.displayInoder(root);
            break;

        case 5:
            cout << "\nEnter the key you want to search : ";
            cin >> searchkey;
            t1.searchNode(searchkey, root);

            break;
        case 6:
            cout << "The height of the tree or the longest path is :" << t1.longestPath(root);
            break;
        case 7:
            exit(0);
    }
}while (choice!=7);
}
